One thread; increment integer 2 000 000 times

===             Increment_SingleThread_NonSynchronized done 2,000,000 time(s) in  90.0 mls ( 45.0 ns/try) === 2000000
===    Increment_SingleThread_NonSynchronized_Volatile done 2,000,000 time(s) in  91.0 mls ( 45.5 ns/try) === 2000000
===                Increment_SingleThread_Synchronized done 2,000,000 time(s) in 110.0 mls ( 55.0 ns/try) === 2000000
===       Increment_SingleThread_Synchronized_Volatile done 2,000,000 time(s) in 110.0 mls ( 55.0 ns/try) === 2000000
===                      Increment_SingleThread_Atomic done 2,000,000 time(s) in  80.0 mls ( 40.0 ns/try) === 2000000
===                        Increment_SingleThread_Lock done 2,000,000 time(s) in 110.0 mls ( 55.0 ns/try) === 2000000

Two threads; increment integer 2 000 000 times by each thread

===              Increment_MultiThread_NonSynchronized done 2,000,000 time(s) in 240.0 mls (120.0 ns/try) === 3967058
===     Increment_MultiThread_NonSynchronized_Volatile done 2,000,000 time(s) in 340.0 mls (170.0 ns/try) === 3957012
===                 Increment_MultiThread_Synchronized done 2,000,000 time(s) in 362.0 mls (181.0 ns/try) === 4000000
===        Increment_MultiThread_Synchronized_Volatile done 2,000,000 time(s) in 480.0 mls (240.0 ns/try) === 4000000
===                       Increment_MultiThread_Atomic done 2,000,000 time(s) in 320.0 mls (160.0 ns/try) === 4000000
===                         Increment_MultiThread_Lock done 2,000,000 time(s) in 491.0 mls (245.5 ns/try) === 4000000

Conclusion:

Thread safe and fastest implementation is AtomicInteger !!! 160 nano second per 1 increment